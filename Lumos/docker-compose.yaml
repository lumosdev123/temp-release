services:

  mongo:
    container_name: mongo
    build:
      context: ./mongo
      dockerfile: Dockerfile
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - .lumos/mongo/configdb:/data/configdb
      - .lumos/mongo/db:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    networks:
      - lumous-network
      
  mongo-init:
    container_name: mongo-init
    image: mongo:7.0
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: "mongosh --host mongo -u root -p root --authenticationDatabase admin --eval \"rs.initiate({_id: 'mongo',members: [{_id: 0, host: 'mongo'}]})\""
    networks:
      - lumous-network

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_BASICAUTH_USERNAME: lumos
      ME_CONFIG_BASICAUTH_PASSWORD: Ab*123456
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/lhivedb?authMechanism=SCRAM-SHA-256&authSource=admin&replicaSet=mongo
      ME_CONFIG_BASICAUTH: true
    networks:
      - lumous-network

  minio:
    image: 'minio/minio:latest'
    ports:
      - '9991:9000'
      - '9990:9990'
    environment:
      MINIO_ROOT_USER: 'root'
      MINIO_ROOT_PASSWORD: 'password'
    volumes:
      - .lumos/minio:/data/minio:z
    restart: always
    command: >
      minio server /data/minio --console-address ":9990"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - lumous-network

  minio_mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "mc alias set myminio http://minio:9000 root password &&
            mc mb myminio/uploads &&
            mc mb myminio/temp &&
            mc ilm rule add --expire-days 1 myminio/temp &&
            mc anonymous set public myminio/uploads &&
            mc anonymous set public myminio/temp
      "
    networks:
      - lumous-network

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    ports:
      - '2181:2181'
    networks:
      - lumous-network
    # volumes:
    #   - .lumos/zookeeper/etc/kafka:/etc/kafka
    #   - .lumos/zookeeper/var/log/kafka:/var/log/kafka

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.7.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    networks:
      - lumous-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      # test:
      #   [
      #     "CMD",
      #     "kafka-broker-api-versions",
      #     "--bootstrap-server",
      #     "kafka:9092"
      #   ]
      test:
        [
          "CMD-SHELL", 
          "echo 'test-message' | kafka-console-producer --bootstrap-server kafka:9092 --topic health-check-topic && kafka-console-consumer --bootstrap-server kafka:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    # command: rm /var/lib/kafka/data/meta.properties
    # volumes:
    #   - .lumos/kafka/data:/var/lib/kafka/data
    #   - .lumos/kafka/log:/var/log/kafka

  # hivemq:
  #   image: hivemq/hivemq4
  #   ports:
  #     - 8080:8080
  #     - 8000:8000
  #     - 1883:1883
  #   networks:
  #     - lumous-network

  lhive-mqtt-connector:
    container_name: 'lhive-mqtt-connector'
    image: lumoscnc24/lhivemqttkafkaconnector:latest
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: always
    environment:
      MQTT_TOPIC: LACC001/#
      #  use local mqtt broker
      # MQTT_URL: ws://hivemq:1883/mqtt
      # MQTT_USERNAME: admin
      # MQTT_PASSWORD: hivemq
      # MQTT_SSL: false
      MQTT_SSL: true
      MQTT_URL: ssl://cbb25e76df7b4849a02b0160c65af57c.s1.eu.hivemq.cloud:8883
      MQTT_USERNAME: Proxy_client_v1
      MQTT_PASSWORD: Kaswinv1
      MONGO_DB_URI: mongodb://root:root@mongo:27017/lhivedb?authMechanism=SCRAM-SHA-256&authSource=admin&replicaSet=mongo
      KAFKA_URL: kafka:9092
    networks:
      - lumous-network

  lhive:
    container_name: 'lhive'
    image: lumoscnc24/lhive:latest
    depends_on:
      mongo-init:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: always
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:8089/actuator/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    environment:
      MONGO_DB_URI: mongodb://root:root@mongo:27017/lhivedb?authMechanism=SCRAM-SHA-256&authSource=admin&replicaSet=mongo
      KAFKA_URL: kafka:9092
      PYTHON_SERVICE_API:  http://lhive-ai:9093/acceData/generate
    networks:
      - lumous-network

  lhive-ai:
    container_name: lhive-ai
    image: lumoscnc24/lhive-ai:latest
    depends_on:
      mongo-init:
        condition: service_started
      kafka:
        condition: service_healthy
      lhive:
        condition: service_started
    ports:
      - "9093:9093"
    restart: always
    environment:
      MONGO_DB_URI: mongodb://root:root@mongo:27017/lhivedb?authMechanism=SCRAM-SHA-256&authSource=admin&replicaSet=mongo
      DB_NAME: lhivedb
    volumes:
      - .lumos/shared-data:/app/saved_outputs:z
    networks:
      - lumous-network

  lhive-statistical-analysis:
    container_name: lhive-statistical-analysis
    image: lumoscnc24/lhivelhivestatisticalanalysis:latest
    depends_on:
      mongo-init:
        condition: service_started
      kafka:
        condition: service_healthy
      lhive-ai:
        condition: service_started
    restart: always
    environment:
      KAFKA_URL: kafka:9092
      DB_URL: mongodb://root:root@mongo:27017/lhivedb?authMechanism=SCRAM-SHA-256&authSource=admin&replicaSet=mongo
      DB_PORT: 27017
      DB_NAME: lhivedb
      COLLECTION_NAME: AcceData
      OUTPUT_COLLECTION_NAME: SensorAiOutput
      KHIVE_AI_PROJECT_PATH: /app/
    volumes:
      - .lumos/shared-data:/app/saved_outputs:z
    networks:
      - lumous-network

  lumos-app:
    container_name: 'lumos-app'
    image: lumoscnc24/lumos-app:latest
    ports:
      - "9090:9090"
    depends_on:
      mongo-init:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: prod
      MONGO_DB_URI: mongodb://root:root@mongo:27017/lhivedb?authMechanism=SCRAM-SHA-256&authSource=admin&replicaSet=mongo
      KHIVE_AI_DIR_PATH: /app/
    volumes:
      - .lumos/shared-data:/app/saved_outputs:z
    restart: always
    networks:
      - lumous-network

  lhive-admin:
    container_name: lhive-admin
    image: lumoscnc24/lhive-admin:latest
    restart: always
    environment:
      - NODE_ENV=production
      - LUMOS_APP_URL=localhost
      - LUMOS_APP_PORT=9090
      - API_URL_PORT=8083
      - VITE_MQTT_URL=wss://cbb25e76df7b4849a02b0160c65af57c.s1.eu.hivemq.cloud:8884/mqtt
    # command: >
    #   /bin/sh -c echo "NODE_ENV=production\nLUMOS_APP_URL=18.118.79.117\nLUMOS_APP_PORT=9090\nAPI_URL_PORT=8083\nVITE_MQTT_URL=wss://cbb25e76df7b4849a02b0160c65af57c.s1.eu.hivemq.cloud:8884/mqtt" > .env.production
    entrypoint: >
      /bin/sh -c "echo VITE_NODE_ENV=production | cat >> .env.production &&
      echo VITE_LUMOS_APP_URL=localhost | cat >> .env.production &&
      echo VITE_LUMOS_APP_PORT=9090 | cat >> .env.production &&
      echo VITE_API_URL_PORT=8083 | cat >> .env.production &&
      echo VITE_MQTT_URL=wss://cbb25e76df7b4849a02b0160c65af57c.s1.eu.hivemq.cloud:8884/mqtt | cat >> .env.production &&
        npm run build &&
        npm run preview
      "
    ports:
      - 9082:9082

  lumos-frontend:
    restart: always
    container_name: lumos-frontend
    image: lumoscnc24/lumos-frontend:latest
    ports:
      - 3000:3000

  lform:
    container_name: lform
    restart: always
    image: lumoscnc24/lform:latest
    depends_on:
      minio_mc:
        condition: service_started
      minio:
        condition: service_healthy
      mongo-init:
        condition: service_started
    ports:
      - 3330:3000
    networks:
      - lumous-network

networks:
  lumous-network:


# volumes:
#   shared-data:
#     driver: local
#   minio:
#   mongo:
#   kafka:
#   zookeeper:
